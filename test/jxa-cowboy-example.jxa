(ns my-app
  (use jxa-cowboy)
  (require joxa-core)
  (require io)
  (require cowboy_req)
  (require simple_env))

;; use an inline middleware function
(app.use my-app (req env)
  (do
    (io/format "~s ~s~n" (cowboy_req/get [:method :path] req))
    {:ok req env}))

(app.use my-app cowboy_router)

;; return an inline body
(app.get my-app "/" (req)
  {200 [] <<"hello world!">> req})

;; inline handler with param
(app.get my-app "/:name" (req)
  (joxa-core/let
      ({name req2} (cowboy_req/binding :name req))
    {200 [] [<<"hello ">> name \!] req2}))

(app.get my-app "/:name/:greeting" (req)
  (joxa-core/let
    (
      {name req2} (cowboy_req/binding :name req)
      {greeting req3} (cowboy_req/binding :greeting req2))
    {200 [] [greeting <<" ">> name \!] req2}))

;; return headers along with body
(app.get my-app "/api/:name/:greeting" (req)
  (joxa-core/let
    (
      {name req2} (cowboy_req/binding :name req)
      {greeting req3} (cowboy_req/binding :greeting req2))
    {200 [{<<"content-type">> <<"application/json">>}]
     [<<"{\"">> greeting <<"\":\"">> name <<"\"}">>] req2}))

(app.use my-app cowboy_handler)

;; listen on a port
(app.listen my-app
  (simple_env/get_integer "PORT" 8080))

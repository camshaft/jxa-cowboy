(ns jxa-cowboy
  (require joxa-core)
  (require cowboy)
  (require cowboy_router)
  (require simple_env)
  (use erlang)
  (require application)
  (require joxa-cmp-util)
  (require joxa-lists)
  (require lists)
  (require ets)
  (require io))

(defn+ DEBUG (value)
  (io/format "~p~n" [value])
  value)

(defn+ format-requires (ref)
  (joxa-lists/map (req (joxa-cmp-util/get-joxa-info :requires ref))
                  `(require ~req)))

(defn+ format-uses (ref)
  (lists/usort
    (joxa-lists/map ({_ {name namespace}} (joxa-cmp-util/get-joxa-info :uses ref))
                  `(use ~namespace))))

(defmacro+ start-http (ref routes port middlewares)
  (let*
    (
     dispatch (cowboy_router/compile routes))
  `(cowboy/start_http
    '~ref
    100
    [{:port ~port}]
    [{:env [{:dispatch '~dispatch}]} {:middlewares ~middlewares}])))

(defn+ start ()
  (case (ets/info :jxa-cowboy)
    (:undefined
     (ets/new :jxa-cowboy [:bag :public :named_table]))
    (_other
     :ok)))

(defn+ app.append (ref key value)
  (ets/insert :jxa-cowboy {{ref key} value}))

(defn+ format-name (ref args)
  (list_to_atom
   (++ (atom_to_list ref)
       (\- . (integer_to_list (phash2 args))))))

(defmacro+ app.use (ref middleware)
  (do
    (jxa-cowboy/start)
    (jxa-cowboy/app.append ref :middlewares middleware)
    `()))

(defmacro+ app.use (ref args expr)
  (let*
    (
     requires (format-requires ref)
     uses (format-uses ref)
     name (format-name ref [args expr]))
    (do
      (jxa-cowboy/start)
      (jxa-cowboy/app.append ref :middlewares name)
      `(do
         (ns ~name
           ~@requires
           ~@uses)

         (defn+ execute ~args ~expr)))))

(defn+ handler-fn (ref method path)
  (jxa-cowboy/format-name ref [method path]))

(defmacro+ add-handler (ref qmethod qpath args expr)
  (joxa-core/let
    (
     requires (format-requires ref)
     uses (format-uses ref)
     [:string path] qpath
     [:quote method] qmethod
     name (format-name ref [:all path])
     handler (format-name ref [method path])
     get-handler (handler-fn ref :get path)
     post-handler (handler-fn ref :post path)
     put-handler (handler-fn ref :put path)
     delete-handler (handler-fn ref :delete path)
     _started (jxa-cowboy/start)
     _appended (jxa-cowboy/app.append ref :routes {path name []}))
     `(do
        (ns ~name
          (require code)
          (require erlang)
          (require cowboy_req)
          (require jsx))

        (defn+ init (_transport req args)
          {:ok req args})

        (defn+ terminate (_reason _req _state)
          :ok)

        (defn respond (status headers body req state)
          (case (cowboy_req/reply status headers body req)
            ({:ok req3}
             {:ok req3 state})))

        (defn handle-json (status headers body req state)
          (respond status ({<<"content-type">> <<"application/json">>} . headers) (jsx/encode body) req state))

        (defn exec (handler req state)
          (code/ensure_loaded handler)
          (case (erlang/function_exported handler :handle 1)
            (:true
              (case (erlang/apply handler :handle [req])
               ({:json body req2}
                (handle-json 200 [] body req2 state))
               ({:json status headers body req2}
                (handle-json 200 headers body req2 state))
               ({:redirect headers url req2}
                (respond 302 ({<<"location">> url} . headers) <<"">> req2 state))
               ({status headers body req2}
                (respond status headers body req2 state))))
            (_not
             (respond 404 [] <<"Not found">> req state))))

        (defn+ handle (req state)
          (case (cowboy_req/method req)
            ({<<"GET">> req2}
             (exec '~get-handler req2 state))
             ({<<"POST">> req2}
              (exec '~post-handler req2 state))
             ({<<"PUT">> req2}
              (exec '~put-handler req2 state))
             ({<<"DELETE">> req2}
              (exec '~delete-handler req2 state))))

        (ns ~handler
          ~@requires
          ~@uses)

        (defn+ handle ~args ~expr))))

      ;; (DEBUG `(do
      ;;    (ns ~handler
      ;;      ~@requires
      ;;      ~@uses)

      ;;    (defn+ handle ~args ~expr)

      ;;    (ns ~name
      ;;      (require erlang)
      ;;      (require cowboy_req)
      ;;      (require jsx)
      ;;      (require jxa-cowboy))

      ;;    (defn+ init (_transport req args)
      ;;      {:ok req args})

      ;;    (defn+ terminate (_reason _req _state)
      ;;      :ok)

      ;;    (defn respond (status headers body req state)
      ;;      (case (cowboy_req/reply status headers body req)
      ;;        ({:ok req3}
      ;;         {:ok req3 state})))

      ;;    (defn handle-json (status headers body req state)
      ;;      (respond status ({<<"content-type">> <<"application/json">>} . headers) (jsx/encode body) req state))

      ;;    (defn exec (handler req state)
      ;;      (case (erlang/apply handler :handle [req])
      ;;        ({:json body req2}
      ;;         (handle-json 200 [] body req2 state))
      ;;        ({:json status headers body req2}
      ;;         (handle-json 200 headers body req2 state))
      ;;        ({:redirect headers url req2}
      ;;         (respond 302 ({<<"location">> url} . headers) <<"">> req2 state))
      ;;        ({status headers body req2}
      ;;         (respond status headers body req2 state))))

      ;;    (defn+ handle (req state)
      ;;      (case (cowboy_req/method req)
      ;;        ({<<"GET">> req2}
      ;;         (exec '~get-handler req2 state))
      ;;        ({<<"POST">> req2}
      ;;         (exec '~post-handler req2 state))
      ;;        ({<<"PUT">> req2}
      ;;         (exec '~put-handler req2 state))
      ;;        ({<<"DELETE">> req2}
      ;;         (exec '~delete-handler req2 state))))


      ;;    )))))

(defmacro+ app.get (ref path args expr)
  `(jxa-cowboy/add-handler ~ref :get ~path ~args ~expr))

(defmacro+ app.post (ref path args expr)
  `(jxa-cowboy/add-handler ~ref :post ~path ~args ~expr))

(defn+ strip-key (items)
  (joxa-lists/map ({key value} items)
                  value))

(defmacro+ app.listen (ref port)
  (joxa-core/let
    (
     requires (format-requires ref)
     uses (format-uses ref)
     middlewares (jxa-cowboy/strip-key (ets/lookup :jxa-cowboy {ref :middlewares}))
     routes [{:_ (jxa-cowboy/strip-key (ets/lookup :jxa-cowboy {ref :routes}))}])
    `(do
       (ns ~ref
         ~@requires
         ~@uses)

       (defn+ listen ()
         (jxa-cowboy/start-http ~ref ~routes ~port '~middlewares)))))
